Утилита для мониторинга кратковременных сетевых разрывов

Суть такова.
Приложение - эхо-сервер и одновременно клиент к нему.
Т.е. у него два режима работы, в зависимости от ключа командной строки.
Соответственно понадобятся два сервера. На одном запущен сервер, на другом - клиент.

Да, оно не умеет самостоятельно уходить в фон. Т.е. нужен nohup или его аналог.

Запускается вот так:
java -jar s2s-connection-checker.jar -c путь_к_конфигу [-s] [-d]
-s либо --server запускает серверный режим работы. Без него стартует в клиентском режиме.
-d либо --debug это для отладки, не нужно, но на всякий случай.

Файл конфигурации нужно строго указывать, как у zabbix-агента.
Минимально требуется java 1.7.

Формат конфига такой:

# - это комментарий. Можно использовать // и ;

[allow]
# после этого заголовка перечисляются сервера/ip-адреса клиентов, которые
# могут подключаться к приложению, когда оно работает в режиме сервера
# (т.е. с ключом -s)
# если тут будет пусто, то сервер не запустится (будет сообщение, что не указано
# ни одного разрешённого адреса)
127.0.0.1
mn-b2b-supervisor.vimpelcom.ru
mn-ttms-app.vimpelcom.ru
# в режиме клиента этот раздел игнорируется, хотя и проверяется на корректность

[targets]
# после этого заголовка перечисляются целевые сервера/ip-адреса серверов,
# к которым приложение будет подключаться в режиме клиента (т.е. без ключа -s)
# можно указывать с портом, через двоеточие
# если порт не указать - используется 20500
10.6.4.12:5000
b2b-test.vimpelcom-test.global
# в режиме сервера этот раздел игнорируется. Если его не будет, приложение в режиме
# клиента не запустится

[port]
# после этого заголовка указывается номер порта. Можно не указывать заголовок и порт,
# тогда используется умолчание - 20500.
# и, да. Будет считана только первая строка с портом
5000
8080 # игнорируется

[commands]
# здесь перечисляются команды диагностики, если клиенту не удалось подключиться
# к серверу. Или произошёл разрыв связи. Таймаут ожидания соединения - 1 сек.
# пробелы отделяют команду от её ключей.
# можно делать подстановку - {IP} подставляет адрес цели, {HOST} - имя.
# лучше вставлять {IP}
ping -c 4 {IP}
tracert {IP}
# все эти команды запускаются одновременно, в единственном экземпляре.
# и будут запускаться до тех пор, пока связь не восстановится.

[log]
# после этого заголовка указывается путь к логу
d:\s2s-checker-%g.log # как пример. %g меняется на номер лога (они ротируются)
# всего создаётся и ротируется 10 логов по 10 Мб каждый.
