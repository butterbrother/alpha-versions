use std::sync::Arc;
use std::cell::RefCell;
use std::cell::Cell;

fn main() {
    // Изменяемость переменных и указателей

    let x = 5; // По-умолчанию не изменяемы
    // x = 6; приведёт к ошибке

    let mut y = 5; // Изменяемая
    y = 6;

    let z = &mut y; // Указатель на изменяемую переменную.
    // Сам указатель не изменить
    *z = 6; // Обращение к данным изменяемой переменной по указателю

    let mut a = 5;
    let mut b = &mut a; // Изменяемый указатель на изменяемую переменную

    // В один момент может быть либо один указатель на
    // изменяемую переменную, &mut T,
    // либо неограниченное число указателей 
    // без возможности изменить переменную, &T
    
    // В Arc<T> изменяемая переменная хранится внутри объекта. c - неизменяемая
    // ссылка на объект
    let c = Arc::new(5);
    // Создать ещё одну ссылку &T на объект можно методом clone
    let d = c.clone();
    println!("{}", d);

    // RefCell позволяет создать ссылку &mut T на него же
    let e = RefCell::new(42);
    let f = e.borrow_mut();
    // Само собой создать ещё одну такую ссылку нельзя
    // let g = e.borrow_mut(); тут будет panic!() и вылет

    struct Point {
        x: i32,         // Здесь mut указывать нельзя
        y: Cell<i32>,   // Поэтому используется Cell, создающий ссылку &T
        // Но внутри хранится &mut T
    }

    let point = Point { x: 5, y: Cell::new(6) };
    point.y.set(7);
    println!("y: {:?}", point.y);
}
